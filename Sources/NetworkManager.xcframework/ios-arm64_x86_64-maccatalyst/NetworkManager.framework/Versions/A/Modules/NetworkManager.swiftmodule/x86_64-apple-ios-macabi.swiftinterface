// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.1-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NetworkManager
import Combine
import Foundation
@_exported import NetworkManager
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum Encoding {
  case URLEncoding
  case JSONEncoding
  case MULTIPARTEncoding
  public static func == (a: NetworkManager.Encoding, b: NetworkManager.Encoding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NetworkError : Swift.Error, Swift.Equatable {
  case noInternetConnection
  case timeout
  case invalidURL(Swift.String?)
  case requestFailed
  case encodingFailed
  case decodingFailed
  case serverError(Foundation.Data)
  case custom(error: Swift.String, code: Swift.Int)
  public var localizedDescription: Swift.String {
    get
  }
  public static func == (a: NetworkManager.NetworkError, b: NetworkManager.NetworkError) -> Swift.Bool
}
extension NetworkManager.APIClient {
  final public func execute<T>(request: any NetworkManager.EndPoint) -> Combine.AnyPublisher<T, any Swift.Error> where T : Swift.Decodable, T : Swift.Encodable
}
public protocol APIClientProtocol {
  func execute<T>(request: any NetworkManager.EndPoint) -> Combine.AnyPublisher<T, any Swift.Error> where T : Swift.Decodable, T : Swift.Encodable
  #if compiler(>=5.3) && $AsyncAwait
  func execute(request: any NetworkManager.EndPoint) async throws -> Foundation.Data
  #endif
}
@_hasMissingDesignatedInitializers final public class APIClient : NetworkManager.APIClientProtocol {
  public static let shared: NetworkManager.APIClient
  @objc deinit
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
public typealias Parameters = [Swift.String : Any]
public protocol EndPoint {
  var base: Swift.String { get }
  var path: Swift.String { get }
  var header: NetworkManager.HTTPHeaders? { get }
  var parameters: NetworkManager.Parameters? { get }
  var method: NetworkManager.HTTPMethods { get }
  var encoding: NetworkManager.Encoding { get }
}
public enum HTTPMethods : Swift.String {
  case post
  case get
  case delete
  case put
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension NetworkManager.APIClient {
  #if compiler(>=5.3) && $AsyncAwait
  final public func execute(request: any NetworkManager.EndPoint) async throws -> Foundation.Data
  #endif
}
extension NetworkManager.Encoding : Swift.Equatable {}
extension NetworkManager.Encoding : Swift.Hashable {}
extension NetworkManager.HTTPMethods : Swift.Equatable {}
extension NetworkManager.HTTPMethods : Swift.Hashable {}
extension NetworkManager.HTTPMethods : Swift.RawRepresentable {}
